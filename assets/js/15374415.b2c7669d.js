"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6048],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>o,MDXProvider:()=>h,mdx:()=>u,useMDXComponents:()=>s,withMDXComponents:()=>p});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(){return d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},d.apply(this,arguments)}function m(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?m(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},d=Object.keys(e);for(n=0;n<d.length;n++)r=d[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)r=d[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),p=function(e){return function(t){var r=s(t.components);return n.createElement(e,d({},t,{components:r}))}},s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},h=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},x={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,d=e.originalType,m=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),p=s(r),h=a,c=p["".concat(m,".").concat(h)]||p[h]||x[h]||d;return r?n.createElement(c,l(l({ref:t},o),{},{components:r})):n.createElement(c,l({ref:t},o))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var d=r.length,m=new Array(d);m[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,m[1]=l;for(var o=2;o<d;o++)m[o]=r[o];return n.createElement.apply(null,m)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},72388:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>m,default:()=>s,frontMatter:()=>d,metadata:()=>l,toc:()=>o});var n=r(83117),a=(r(67294),r(3905));const d={id:"torchlive_torch.tensor",title:"Interface: Tensor",sidebar_label:"Tensor",custom_edit_url:null},m=void 0,l={unversionedId:"api/core/interfaces/torchlive_torch.tensor",id:"version-0.2.0/api/core/interfaces/torchlive_torch.tensor",title:"Interface: Tensor",description:"torchlive/torch.Tensor",source:"@site/versioned_docs/version-0.2.0/api/core/interfaces/torchlive_torch.tensor.md",sourceDirName:"api/core/interfaces",slug:"/api/core/interfaces/torchlive_torch.tensor",permalink:"/live/docs/api/core/interfaces/torchlive_torch.tensor",draft:!1,editUrl:null,tags:[],version:"0.2.0",frontMatter:{id:"torchlive_torch.tensor",title:"Interface: Tensor",sidebar_label:"Tensor",custom_edit_url:null},sidebar:"api",previous:{title:"Module",permalink:"/live/docs/api/core/interfaces/torchlive_torch.module"},next:{title:"Torch",permalink:"/live/docs/api/core/interfaces/torchlive_torch.torch"}},i={},o=[{value:"Indexable",id:"indexable",level:2},{value:"Properties",id:"properties",level:2},{value:"dtype",id:"dtype",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"shape",id:"shape",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"abs",id:"abs",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"add",id:"add",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"argmax",id:"argmax",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"clamp",id:"clamp",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"contiguous",id:"contiguous",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"data",id:"data",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"div",id:"div",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"item",id:"item",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"mul",id:"mul",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"permute",id:"permute",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"reshape",id:"reshape",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"size",id:"size",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"softmax",id:"softmax",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"sqrt",id:"sqrt",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"squeeze",id:"squeeze",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"stride",id:"stride",level:3},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"sub",id:"sub",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"sum",id:"sum",level:3},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"to",id:"to",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"topk",id:"topk",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"unsqueeze",id:"unsqueeze",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-25",level:4}],p={toc:o};function s(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/modules/torchlive_torch"},"torchlive/torch"),".Tensor"),(0,a.mdx)("h2",{id:"indexable"},"Indexable"),(0,a.mdx)("p",null,"\u25aa ","[index: ",(0,a.mdx)("inlineCode",{parentName:"p"},"number"),"]",": ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Access tensor with index."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-typescript"},"const tensor = torch.rand([2]);\nconsole.log(tensor.data, tensor[0].data);\n// [0.8339180946350098, 0.17733973264694214], [0.8339180946350098]\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/cppdocs/notes/tensor_indexing.html"},"https://pytorch.org/cppdocs/notes/tensor_indexing.html")),(0,a.mdx)("h2",{id:"properties"},"Properties"),(0,a.mdx)("h3",{id:"dtype"},"dtype"),(0,a.mdx)("p",null,"\u2022 ",(0,a.mdx)("strong",{parentName:"p"},"dtype"),": ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/modules/torchlive_torch#dtype"},"Dtype")),(0,a.mdx)("p",null,"A dtype is an string that represents the data type of a torch.Tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/tensor_attributes.html"},"https://pytorch.org/docs/1.11/tensor_attributes.html")),(0,a.mdx)("h4",{id:"defined-in"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:236"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"shape"},"shape"),(0,a.mdx)("p",null,"\u2022 ",(0,a.mdx)("strong",{parentName:"p"},"shape"),": ",(0,a.mdx)("inlineCode",{parentName:"p"},"number"),"[]"),(0,a.mdx)("p",null,"Returns the size of the tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.size.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.size.html")),(0,a.mdx)("h4",{id:"defined-in-1"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:274"),(0,a.mdx)("h2",{id:"methods"},"Methods"),(0,a.mdx)("h3",{id:"abs"},"abs"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"abs"),"(): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Computes the absolute value of each element in input."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.abs.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.abs.html")),(0,a.mdx)("h4",{id:"returns"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-2"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:145"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"add"},"add"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"add"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"other"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"options?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Add a scalar or tensor to this tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.add.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.add.html")),(0,a.mdx)("h4",{id:"parameters"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"other")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Scalar or tensor to be added to each element in this tensor.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Object")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"-")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.alpha?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The multiplier for ",(0,a.mdx)("inlineCode",{parentName:"td"},"other"),". Default: ",(0,a.mdx)("inlineCode",{parentName:"td"},"1"),".")))),(0,a.mdx)("h4",{id:"returns-1"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-3"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:154"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"argmax"},"argmax"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"argmax"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"options?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns the indices of the maximum value of all elements in the input\ntensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.argmax.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.argmax.html")),(0,a.mdx)("h4",{id:"parameters-1"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Object")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"argmax Options as keywords argument in pytorch")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.dim?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The dimension to reduce. If ",(0,a.mdx)("inlineCode",{parentName:"td"},"undefined"),", the argmax of the flattened input is returned.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.keepdim?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"boolean")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Whether the output tensor has ",(0,a.mdx)("inlineCode",{parentName:"td"},"dim")," retained or not. Ignored if ",(0,a.mdx)("inlineCode",{parentName:"td"},"dim")," is ",(0,a.mdx)("inlineCode",{parentName:"td"},"undefined"),".")))),(0,a.mdx)("h4",{id:"returns-2"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-4"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:165"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"clamp"},"clamp"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"clamp"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"min"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"max?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Clamps all elements in input into the range ",(0,a.mdx)("inlineCode",{parentName:"p"},"[ min, max ]"),"."),(0,a.mdx)("p",null,"If ",(0,a.mdx)("inlineCode",{parentName:"p"},"min")," is ",(0,a.mdx)("inlineCode",{parentName:"p"},"undefined"),", there is no lower bound. Or, if ",(0,a.mdx)("inlineCode",{parentName:"p"},"max")," is ",(0,a.mdx)("inlineCode",{parentName:"p"},"undefined")," there is no upper bound."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.clamp.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.clamp.html")),(0,a.mdx)("h4",{id:"parameters-2"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"min")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Lower-bound of the range to be clamped to")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"max?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Upper-bound of the range to be clamped to")))),(0,a.mdx)("h4",{id:"returns-3"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-5"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:176"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"clamp"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"options"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Clamps all elements in input into the range ",(0,a.mdx)("inlineCode",{parentName:"p"},"[ min, max ]"),"."),(0,a.mdx)("p",null,"If ",(0,a.mdx)("inlineCode",{parentName:"p"},"min")," is ",(0,a.mdx)("inlineCode",{parentName:"p"},"undefined"),", there is no lower bound. Or, if ",(0,a.mdx)("inlineCode",{parentName:"p"},"max")," is ",(0,a.mdx)("inlineCode",{parentName:"p"},"undefined")," there is no upper bound."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.clamp.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.clamp.html")),(0,a.mdx)("h4",{id:"parameters-3"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Object")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"-")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.max?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Upper-bound of the range to be clamped to")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.min?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Lower-bound of the range to be clamped to")))),(0,a.mdx)("h4",{id:"returns-4"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-6"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:187"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"contiguous"},"contiguous"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"contiguous"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"options?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns a contiguous in memory tensor containing the same data as this\ntensor. If this tensor is already in the specified memory format, this\nfunction returns this tensor."),(0,a.mdx)("h4",{id:"parameters-4"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Object")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"-")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.memoryFormat")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/modules/torchlive_torch#memoryformat"},"MemoryFormat")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The desired memory format of returned Tensor. Default: torch.contiguousFormat.  ",(0,a.mdx)("a",{parentName:"td",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.contiguous.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.contiguous.html"))))),(0,a.mdx)("h4",{id:"returns-5"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-7"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:197"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"data"},"data"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"data"),"(): ",(0,a.mdx)("inlineCode",{parentName:"p"},"TypedArray")),(0,a.mdx)("p",null,"Returns the tensor data as ",(0,a.mdx)("inlineCode",{parentName:"p"},"TypedArray")," buffer."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray")),(0,a.mdx)("p",null,"A valid TypeScript expression is as follows:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-typescript"},"torch.rand([2, 3]).data()[3];\n")),(0,a.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,a.mdx)("h5",{parentName:"div"},(0,a.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,a.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.mdx)("div",{parentName:"div",className:"admonition-content"},(0,a.mdx)("p",{parentName:"div"},"The function only exists in JavaScript."))),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},(0,a.mdx)("inlineCode",{parentName:"strong"},"experimental"))),(0,a.mdx)("h4",{id:"returns-6"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"TypedArray")),(0,a.mdx)("h4",{id:"defined-in-8"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:217"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"div"},"div"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"div"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"other"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"options?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Divides each element of the input input by the corresponding element of\nother."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.div.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.div.html")),(0,a.mdx)("h4",{id:"parameters-5"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"other")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Scalar or tensor that divides each element in this tensor.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Object")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"-")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.roundingMode?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},'"trunc"')," ","|"," ",(0,a.mdx)("inlineCode",{parentName:"td"},'"floor"')),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Type of rounding applied to the result")))),(0,a.mdx)("h4",{id:"returns-7"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-9"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:227"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"item"},"item"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"item"),"(): ",(0,a.mdx)("inlineCode",{parentName:"p"},"number")),(0,a.mdx)("p",null,"Returns the value of this tensor as a ",(0,a.mdx)("inlineCode",{parentName:"p"},"number"),". This only works for\ntensors with one element."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.item.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.item.html")),(0,a.mdx)("h4",{id:"returns-8"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"number")),(0,a.mdx)("h4",{id:"defined-in-10"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:243"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"mul"},"mul"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"mul"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"other"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Multiplies input by other scalar or tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.mul.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.mul.html")),(0,a.mdx)("h4",{id:"parameters-6"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"other")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Scalar or tensor multiplied with each element in this tensor.")))),(0,a.mdx)("h4",{id:"returns-9"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-11"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:260"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"permute"},"permute"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"permute"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"dims"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns a view of the original tensor input with its dimensions permuted."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.permute.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.permute.html")),(0,a.mdx)("h4",{id:"parameters-7"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"dims")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number"),"[]"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The desired ordering of dimensions.")))),(0,a.mdx)("h4",{id:"returns-10"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-12"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:268"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"reshape"},"reshape"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"reshape"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"shape"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns a tensor with the same data and number of elements as input, but\nwith the specified shape."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.reshape.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.reshape.html")),(0,a.mdx)("h4",{id:"parameters-8"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"shape")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number"),"[]"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The new shape.")))),(0,a.mdx)("h4",{id:"returns-11"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-13"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:252"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"size"},"size"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"size"),"(): ",(0,a.mdx)("inlineCode",{parentName:"p"},"number"),"[]"),(0,a.mdx)("p",null,"Returns the size of the tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.size.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.size.html")),(0,a.mdx)("h4",{id:"returns-12"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"number"),"[]"),(0,a.mdx)("h4",{id:"defined-in-14"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:280"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"softmax"},"softmax"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"softmax"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"dim"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Applies a softmax function. It is applied to all slices along dim, and\nwill re-scale them so that the elements lie in the range ",(0,a.mdx)("inlineCode",{parentName:"p"},"[0, 1]")," and sum\nto ",(0,a.mdx)("inlineCode",{parentName:"p"},"1"),"."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.nn.functional.softmax.html"},"https://pytorch.org/docs/1.11/generated/torch.nn.functional.softmax.html")),(0,a.mdx)("h4",{id:"parameters-9"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"dim")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"A dimension along which softmax will be computed.")))),(0,a.mdx)("h4",{id:"returns-13"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-15"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:290"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"sqrt"},"sqrt"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"sqrt"),"(): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Computes the square-root value of each element in input."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.sqrt.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.sqrt.html")),(0,a.mdx)("h4",{id:"returns-14"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-16"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:296"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"squeeze"},"squeeze"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"squeeze"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"dim?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns a tensor with all the dimensions of input of size 1 removed."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.squeeze.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.squeeze.html")),(0,a.mdx)("h4",{id:"parameters-10"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"dim?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"If given, the input will be squeezed only in this dimension.")))),(0,a.mdx)("h4",{id:"returns-15"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-17"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:304"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"stride"},"stride"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"stride"),"(): ",(0,a.mdx)("inlineCode",{parentName:"p"},"number"),"[]"),(0,a.mdx)("p",null,"Returns the stride of the tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.stride.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.stride.html")),(0,a.mdx)("h4",{id:"returns-16"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"number"),"[]"),(0,a.mdx)("h4",{id:"defined-in-18"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:310"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"stride"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"dim"),"): ",(0,a.mdx)("inlineCode",{parentName:"p"},"number")),(0,a.mdx)("p",null,"Returns the stride of the tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.stride.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.stride.html")),(0,a.mdx)("h4",{id:"parameters-11"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"dim")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The desired dimension in which stride is required.")))),(0,a.mdx)("h4",{id:"returns-17"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"number")),(0,a.mdx)("h4",{id:"defined-in-19"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:318"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"sub"},"sub"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"sub"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"other"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"options?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Subtracts other from input."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.sub.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.sub.html")),(0,a.mdx)("h4",{id:"parameters-12"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"other")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The scalar or tensor to subtract from input.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Object")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"-")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.alpha?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The multiplier for ",(0,a.mdx)("inlineCode",{parentName:"td"},"other"),". Default: ",(0,a.mdx)("inlineCode",{parentName:"td"},"1"),".")))),(0,a.mdx)("h4",{id:"returns-18"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-20"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:327"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"sum"},"sum"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"sum"),"(): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns the sum of all elements in the input tensor."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.sum.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.sum.html")),(0,a.mdx)("h4",{id:"returns-19"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-21"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:333"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"sum"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"dim"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"options?"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns the sum of each row of the input tensor in the given dimension dim.\nIf dim is a list of dimensions, reduce over all of them."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.sum.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.sum.html")),(0,a.mdx)("h4",{id:"parameters-13"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"dim")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.mdx)("inlineCode",{parentName:"td"},"number"),"[]"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The dimension or dimensions to reduce.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"Object")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"-")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options.keepdim?")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"boolean")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Whether the output tensor has ",(0,a.mdx)("inlineCode",{parentName:"td"},"dim")," retained or not.")))),(0,a.mdx)("h4",{id:"returns-20"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-22"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:343"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"to"},"to"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"to"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"options"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Performs Tensor conversion."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.to.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.to.html")),(0,a.mdx)("h4",{id:"parameters-14"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"options")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("a",{parentName:"td",href:"/live/docs/api/core/modules/torchlive_torch#tensoroptions"},"TensorOptions")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Tensor options.")))),(0,a.mdx)("h4",{id:"returns-21"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-23"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:351"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"topk"},"topk"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"topk"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"k"),"): [",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor"),", ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor"),"]"),(0,a.mdx)("p",null,"Returns the k largest elements of the given input tensor along a given\ndimension."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.topk.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.topk.html")),(0,a.mdx)("h4",{id:"parameters-15"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"k")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},'The k in "top-k"')))),(0,a.mdx)("h4",{id:"returns-22"},"Returns"),(0,a.mdx)("p",null,"[",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor"),", ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor"),"]"),(0,a.mdx)("h4",{id:"defined-in-24"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:360"),(0,a.mdx)("hr",null),(0,a.mdx)("h3",{id:"unsqueeze"},"unsqueeze"),(0,a.mdx)("p",null,"\u25b8 ",(0,a.mdx)("strong",{parentName:"p"},"unsqueeze"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"dim"),"): ",(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("p",null,"Returns a new tensor with a dimension of size one inserted at the\nspecified position."),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://pytorch.org/docs/1.11/generated/torch.Tensor.unsqueeze.html"},"https://pytorch.org/docs/1.11/generated/torch.Tensor.unsqueeze.html")),(0,a.mdx)("h4",{id:"parameters-16"},"Parameters"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"dim")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"number")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The index at which to insert the singleton dimension.")))),(0,a.mdx)("h4",{id:"returns-23"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"/live/docs/api/core/interfaces/torchlive_torch.tensor"},"Tensor")),(0,a.mdx)("h4",{id:"defined-in-25"},"Defined in"),(0,a.mdx)("p",null,"torchlive/torch.ts:369"))}s.isMDXComponent=!0}}]);