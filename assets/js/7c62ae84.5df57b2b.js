"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2557],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>c,withMDXComponents:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),m=function(e){return function(t){var n=c(t.components);return a.createElement(e,i({},t,{components:n}))}},c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),p=o,u=m["".concat(r,".").concat(p)]||m[p]||h[p]||i;return n?a.createElement(u,l(l({ref:t},d),{},{components:n})):a.createElement(u,l({ref:t},d))}));function x(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},27436:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),o=n(86010),i=n(86668);const r="expoSnack_M4rn";function l(e){let{snackPreview:t=!0,snackId:n,snackStyle:l}=e;const{isDarkTheme:s}=(0,i.L)(),d=(0,a.useRef)(null);return(0,a.useEffect)((()=>{const e=d.current;null!==e&&null!=window.ExpoSnack&&(window.ExpoSnack.remove(e),window.ExpoSnack.append(e))}),[s]),a.createElement("div",{ref:d,className:(0,o.default)([r,l]),"data-snack-id":n,"data-snack-loading":"lazy","data-snack-platform":"mydevice","data-snack-preview":t,"data-snack-supported-platforms":"mydevice","data-snack-theme":s?"dark":"light"})}},62299:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294);const o="forkSnackButton_fx3W";function i(e){let{snackIdentifier:t,label:n="Click to Copy Starter Snack"}=e;return a.createElement("a",{href:"https://snack.expo.dev/"+t+"?supportedPlatforms=my-device",target:"_blank",rel:"noopener noreferrer",className:o},n)}},40005:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var a=n(83117),o=(n(67294),n(3905)),i=n(27436),r=n(62299);const l={id:"object-detection",title:"Object Detection"},s=void 0,d={unversionedId:"tutorials/snacks/object-detection",id:"tutorials/snacks/object-detection",title:"Object Detection",description:"In this tutorial, you will implement a function that takes in an image and runs it through an object detection model to find what objects are in the image and where.",source:"@site/docs/tutorials/snacks/object-detection.mdx",sourceDirName:"tutorials/snacks",slug:"/tutorials/snacks/object-detection",permalink:"/docs/next/tutorials/snacks/object-detection",draft:!1,editUrl:"https://github.com/facebookresearch/playtorch/edit/main/website/docs/tutorials/snacks/object-detection.mdx",tags:[],version:"current",frontMatter:{id:"object-detection",title:"Object Detection"},sidebar:"docs",previous:{title:"Question Answering",permalink:"/docs/next/tutorials/snacks/nlp-qa"},next:{title:"AnimeGAN",permalink:"/docs/next/tutorials/snacks/anime-gan"}},m={},c=[{value:"Viewing this Demo",id:"viewing-this-demo",level:2},{value:"Preview",id:"preview",level:2},{value:"Overview",id:"overview",level:2},{value:"Copying the Starter Snack",id:"copying-the-starter-snack",level:2},{value:"<code>screens/</code>",id:"screens",level:4},{value:"<code>App.js</code>",id:"appjs",level:4},{value:"<code>CoCoClasses.json</code>",id:"cococlassesjson",level:4},{value:"<code>ObjectDetector.js</code>",id:"objectdetectorjs",level:4},{value:"<code>package.json</code>",id:"packagejson",level:4},{value:"Running the project in the PlayTorch app",id:"running-the-project-in-the-playtorch-app",level:2},{value:"Create an image handler function",id:"create-an-image-handler-function",level:2},{value:"Convert image to tensor ready for inference",id:"convert-image-to-tensor-ready-for-inference",level:2},{value:"Load model and run inference",id:"load-model-and-run-inference",level:2},{value:"Format model output",id:"format-model-output",level:2},{value:"Display results",id:"display-results",level:2},{value:"Wrapping up",id:"wrapping-up",level:2},{value:"Providing feedback",id:"providing-feedback",level:3}],p={toc:c};function h(e){let{components:t,...l}=e;return(0,o.mdx)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"In this tutorial, you will implement a function that takes in an image and runs it through an object detection model to find what objects are in the image and where."),(0,o.mdx)("h2",{id:"viewing-this-demo"},"Viewing this Demo"),(0,o.mdx)("p",null,"In order to view this demo ",(0,o.mdx)("a",{parentName:"p",href:"/docs/next/tutorials/get-started#download-the-playtorch-app"},"download the PlayTorch app"),"."),(0,o.mdx)("h2",{id:"preview"},"Preview"),(0,o.mdx)("p",null,"If you want a sneak peek at what you'll be building, run this Snack by scanning the QR code in the PlayTorch app!"),(0,o.mdx)(i.Z,{snackId:"@playtorch/object-detection",mdxType:"ExpoSnack"}),(0,o.mdx)("h2",{id:"overview"},"Overview"),(0,o.mdx)("p",null,"We'll go through the following steps:"),(0,o.mdx)("p",null,"This tutorial will focus on the machine learning aspects of creating this object detection prototype. In order to focus on machine learning, we will provide the UI code for you."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Create a copy of the starter Expo Snack"),(0,o.mdx)("li",{parentName:"ol"},"Run the project in the PlayTorch app"),(0,o.mdx)("li",{parentName:"ol"},"Create an image handler function"),(0,o.mdx)("li",{parentName:"ol"},"Convert image to tensor ready for inference"),(0,o.mdx)("li",{parentName:"ol"},"Load model and run inference"),(0,o.mdx)("li",{parentName:"ol"},"Format model output"),(0,o.mdx)("li",{parentName:"ol"},"Display results")),(0,o.mdx)("h2",{id:"copying-the-starter-snack"},"Copying the Starter Snack"),(0,o.mdx)("p",null,"Click the button below to open your own copy of the starter Expo Snack for this tutorial. It will open a new tab to an Expo Snack, the in-browser code editor we will use for this tutorial that allows us to test our code in the PlayTorch app."),(0,o.mdx)(r.Z,{snackIdentifier:"@playtorch/start---object-detection",mdxType:"ForkSnackButton"}),(0,o.mdx)("p",null,"Let's run through a quick overview of everything that you can find in the starter snack."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-shell",metastring:'title="Snack Contents"',title:'"Snack','Contents"':!0},"screens/\n\u251c\u2500 CameraScreen.js\n\u251c\u2500 LoadingScreen.js\n\u251c\u2500 ResultsScreen.js\nApp.js\nCoCoClasses.json\nObjectDetector.js\npackage.json\n")),(0,o.mdx)("h4",{id:"screens"},(0,o.mdx)("inlineCode",{parentName:"h4"},"screens/")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"screens")," folder contains three files -- one for each screen of the object detection prototype we are building."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},(0,o.mdx)("inlineCode",{parentName:"strong"},"CameraScreen.js"))," - A full screen camera view to capture the image we will run through our object detection model"),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},(0,o.mdx)("inlineCode",{parentName:"strong"},"LoadingScreen.js"))," - A loading screen that let's the user know the image is being processed"),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},(0,o.mdx)("inlineCode",{parentName:"strong"},"ResultsScreen.js"))," - A screen showing the image and the bounding boxes of the detected objects")),(0,o.mdx)("h4",{id:"appjs"},(0,o.mdx)("inlineCode",{parentName:"h4"},"App.js")),(0,o.mdx)("p",null,"This file manages which screen to show and helps pass data between them."),(0,o.mdx)("h4",{id:"cococlassesjson"},(0,o.mdx)("inlineCode",{parentName:"h4"},"CoCoClasses.json")),(0,o.mdx)("p",null,"This file contains the labels for the different classes of objects that our model has been trained to detect."),(0,o.mdx)("h4",{id:"objectdetectorjs"},(0,o.mdx)("inlineCode",{parentName:"h4"},"ObjectDetector.js")),(0,o.mdx)("p",null,"This file will contain the code that actually runs our machine learning model."),(0,o.mdx)("h4",{id:"packagejson"},(0,o.mdx)("inlineCode",{parentName:"h4"},"package.json")),(0,o.mdx)("p",null,"This file contains a list of packages that our project depends on so the app knows to download them."),(0,o.mdx)("h2",{id:"running-the-project-in-the-playtorch-app"},"Running the project in the PlayTorch app"),(0,o.mdx)("p",null,'Open the PlayTorch app and from the home screen, tap "Scan QR Code".'),(0,o.mdx)("p",null,"If you have never done this before, it will ask for camera permissions. Grant the app camera permissions and scan the QR code from the right side of the Snack window."),(0,o.mdx)("p",null,"If you haven't made any changes to the snack, you should see a screen that looks like this (with a different view in your camera of course):"),(0,o.mdx)("p",null,(0,o.mdx)("img",{src:n(24070).Z,width:"300",height:"650"})),(0,o.mdx)("p",null,"In this starter state, nothing happens when you press the camera's capture button. Let's fix that."),(0,o.mdx)("h2",{id:"create-an-image-handler-function"},"Create an image handler function"),(0,o.mdx)("p",null,"In the initial state of the codebase, if we look into our ",(0,o.mdx)("inlineCode",{parentName:"p"},"CameraScreen.js")," file, we will notice:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"It is expecting an ",(0,o.mdx)("inlineCode",{parentName:"li"},"onCapture")," function as a prop (line 6)"),(0,o.mdx)("li",{parentName:"ul"},"It passes the ",(0,o.mdx)("inlineCode",{parentName:"li"},"onCapture")," prop to the ",(0,o.mdx)("inlineCode",{parentName:"li"},"<Camera />")," component provided by ",(0,o.mdx)("inlineCode",{parentName:"li"},"react-native-pytorch-core")," (line 12)")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-jsx",metastring:'title="CameraScreen.js" {6,12}',title:'"CameraScreen.js"',"{6,12}":!0},"import * as React from 'react';\nimport {useRef} from 'react';\nimport {StyleSheet} from 'react-native';\nimport {Camera} from 'react-native-pytorch-core';\n\nexport default function CameraScreen({onCapture}) {\n  const cameraRef = useRef(null);\n  return (\n    <Camera\n      ref={cameraRef}\n      style={styles.camera}\n      onCapture={onCapture}\n      targetResolution={{width: 1080, height: 1920}}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  camera: {width: '100%', height: '100%'},\n});\n")),(0,o.mdx)("p",null,"However, currently the code in our ",(0,o.mdx)("inlineCode",{parentName:"p"},"App.js")," file doesn't pass anything to our ",(0,o.mdx)("inlineCode",{parentName:"p"},"<CameraScreen />")," component. Make the changes in the code below to your ",(0,o.mdx)("inlineCode",{parentName:"p"},"App.js")," file to create a function for handling captured images."),(0,o.mdx)("p",null,"Here is a quick summary of the changes that we are making:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Create a new async function called ",(0,o.mdx)("inlineCode",{parentName:"li"},"handleImage")," that does the following:",(0,o.mdx)("ol",{parentName:"li"},(0,o.mdx)("li",{parentName:"ol"},"Log the image so we can inspect it"),(0,o.mdx)("li",{parentName:"ol"},"Release the image so it doesn't leak memory"))),(0,o.mdx)("li",{parentName:"ol"},"Pass the new ",(0,o.mdx)("inlineCode",{parentName:"li"},"handleImage")," property to the ",(0,o.mdx)("inlineCode",{parentName:"li"},"onCapture")," prop")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js" {39-43,48}',title:'"App.js"',"{39-43,48}":!0},"import * as React from 'react';\nimport {useCallback, useRef, useState} from 'react';\nimport {\n  ActivityIndicator,\n  Button,\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport {Camera, Canvas, Image} from 'react-native-pytorch-core';\nimport detectObjects from './ObjectDetector';\nimport CameraScreen from './screens/CameraScreen';\nimport LoadingScreen from './screens/LoadingScreen';\nimport ResultsScreen from './screens/ResultsScreen';\n\nconst ScreenStates = {\n  CAMERA: 0,\n  LOADING: 1,\n  RESULTS: 2,\n};\n\nexport default function ObjectDetectionExample() {\n  const [image, setImage] = useState(null);\n  const [boundingBoxes, setBoundingBoxes] = useState(null);\n  const [screenState, setScreenState] = useState(ScreenStates.CAMERA);\n\n  // Handle the reset button and return to the camera capturing mode\n  const handleReset = useCallback(async () => {\n    setScreenState(ScreenStates.CAMERA);\n    if (image != null) {\n      await image.release();\n    }\n    setImage(null);\n    setBoundingBoxes(null);\n  }, [image, setScreenState]);\n\n  // This handler function handles the camera's capture event\n  async function handleImage(capturedImage) {\n    console.log('Captured image', capturedImage);\n    capturedImage.release();\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {screenState === ScreenStates.CAMERA && (\n        <CameraScreen onCapture={handleImage} />\n      )}\n      {screenState === ScreenStates.LOADING && <LoadingScreen />}\n      {screenState === ScreenStates.RESULTS && (\n        <ResultsScreen\n          image={image}\n          boundingBoxes={boundingBoxes}\n          onReset={handleReset}\n        />\n      )}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n")),(0,o.mdx)("p",null,"Run the updated code on the PlayTorch app, press the camera capture button and then check the logs to see what it output."),(0,o.mdx)("p",null,"Open the logs in the Snack window by clicking the settings gear icon at the bottom of the window, enabling the Panel, and clicking the logs tab of the newly opened panel."),(0,o.mdx)("p",null,(0,o.mdx)("img",{src:n(4145).Z,width:"3006",height:"1653"})),(0,o.mdx)("p",null,"You should see something like the following, but with a different ID:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-shell"},'Captured image {"ID":"ABEF4518-A791-45C3-BA5C-C424F96C58EC"}\n')),(0,o.mdx)("p",null,"Now that we have access to the images that we are capturing, let's write some code to convert them into a format that our ML model can understand."),(0,o.mdx)("h2",{id:"convert-image-to-tensor-ready-for-inference"},"Convert image to tensor ready for inference"),(0,o.mdx)("p",null,"In order to keep our code clean and simple to understand, we will seperate all of the code that interacts with the ML model into its own file. That file already exists and is called ",(0,o.mdx)("inlineCode",{parentName:"p"},"ObjectDetector.js"),"."),(0,o.mdx)("p",null,"Open that file and notice it is a rather bare file. All that it does at the moment is export an async function called ",(0,o.mdx)("inlineCode",{parentName:"p"},"detectObjects")," that expects an ",(0,o.mdx)("inlineCode",{parentName:"p"},"image")," as a parameter."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js",metastring:'title="ObjectDetector.js"',title:'"ObjectDetector.js"'},"export default async function detectObjects(image) {}\n")),(0,o.mdx)("p",null,"The model we will be using for object detection is called ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/detr"},"DETR"),", which stands for Detection Transformer."),(0,o.mdx)("p",null,"The DETR model only knows how to process data in a very specific format. We will be converting our image into a tensor (a multi-dimensional array) and then rearranging the data in that tensor to be formatted just how DETR expects it."),(0,o.mdx)("p",null,"The code below does all the transformations needed to the image. Here's a summary of what is going on:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Import ",(0,o.mdx)("inlineCode",{parentName:"li"},"media"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"torch"),", and ",(0,o.mdx)("inlineCode",{parentName:"li"},"torchvision")," from the PlayTorch SDK (",(0,o.mdx)("inlineCode",{parentName:"li"},"react-native-pytorch-core"),")"),(0,o.mdx)("li",{parentName:"ol"},"Create variable ",(0,o.mdx)("inlineCode",{parentName:"li"},"T")," that is a shortcut way of accessing ",(0,o.mdx)("inlineCode",{parentName:"li"},"torchvisions.transforms")," since we will be using the transforms a lot"),(0,o.mdx)("li",{parentName:"ol"},"Update the empty ",(0,o.mdx)("inlineCode",{parentName:"li"},"detectObjects")," function to do the following:",(0,o.mdx)("ol",{parentName:"li"},(0,o.mdx)("li",{parentName:"ol"},"Store the dimensions of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"image")," to ",(0,o.mdx)("inlineCode",{parentName:"li"},"imageWidth")," and ",(0,o.mdx)("inlineCode",{parentName:"li"},"imageHeight")," variables"),(0,o.mdx)("li",{parentName:"ol"},"Create a ",(0,o.mdx)("inlineCode",{parentName:"li"},"blob")," (a raw memory store of file contents, which in this case contains the RGB byte values) from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"image")," parameter using the ",(0,o.mdx)("inlineCode",{parentName:"li"},"media.toBlob")," function"),(0,o.mdx)("li",{parentName:"ol"},"Create a ",(0,o.mdx)("inlineCode",{parentName:"li"},"tensor")," with the raw data in the newly created ",(0,o.mdx)("inlineCode",{parentName:"li"},"blob")," and with the shape defined by the array ",(0,o.mdx)("inlineCode",{parentName:"li"},"[imageHeight, imageWidth, 3]")," (the size of the image and 3 for RGB)"),(0,o.mdx)("li",{parentName:"ol"},"Rearange the order of the tensor so the channels (RGB) are first, then the height and width"),(0,o.mdx)("li",{parentName:"ol"},"Transform all the values in the tensor to be floating point numbers between 0 and 1 instead of byte values between 0 and 255"),(0,o.mdx)("li",{parentName:"ol"},"Create a resize transformation with size 800 called ",(0,o.mdx)("inlineCode",{parentName:"li"},"resize")),(0,o.mdx)("li",{parentName:"ol"},"Apply the ",(0,o.mdx)("inlineCode",{parentName:"li"},"resize")," transformation to the tensor"),(0,o.mdx)("li",{parentName:"ol"},"Create a normalization transformation called ",(0,o.mdx)("inlineCode",{parentName:"li"},"normalize")," with mean and standard deviation values that the model was trained on"),(0,o.mdx)("li",{parentName:"ol"},"Apply the ",(0,o.mdx)("inlineCode",{parentName:"li"},"nomralize")," transformation to the tensor"),(0,o.mdx)("li",{parentName:"ol"},"Add an extra leading dimension to the tensor with ",(0,o.mdx)("inlineCode",{parentName:"li"},"tensor.unsqueeze")),(0,o.mdx)("li",{parentName:"ol"},"Log the final shape to make sure it matches the format the model needs which is ",(0,o.mdx)("inlineCode",{parentName:"li"},"[1, 3, 800, 800]"))))),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js",metastring:'title="ObjectDetector.js"',title:'"ObjectDetector.js"'},"import {media, torch, torchvision} from 'react-native-pytorch-core';\n\nconst T = torchvision.transforms;\n\nexport default async function detectObjects(image) {\n  // Get image width and height\n  const imageWidth = image.getWidth();\n  const imageHeight = image.getHeight();\n\n  // Convert image to blob, which is a byte representation of the image\n  // in the format height (H), width (W), and channels (C), or HWC for short\n  const blob = media.toBlob(image);\n\n  // Get a tensor from image the blob and also define in what format\n  // the image blob is.\n  let tensor = torch.fromBlob(blob, [imageHeight, imageWidth, 3]);\n\n  // Rearrange the tensor shape to be [CHW]\n  tensor = tensor.permute([2, 0, 1]);\n\n  // Divide the tensor values by 255 to get values between [0, 1]\n  tensor = tensor.div(255);\n\n  // Resize the image tensor to 3 x min(height, 800) x min(width, 800)\n  const resize = T.resize(800);\n  tensor = resize(tensor);\n\n  // Normalize the tensor image with mean and standard deviation\n  const normalize = T.normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]);\n  tensor = normalize(tensor);\n\n  // Unsqueeze adds 1 leading dimension to the tensor\n  const formattedInputTensor = tensor.unsqueeze(0);\n  console.log(formattedInputTensor);\n}\n")),(0,o.mdx)("p",null,"In order for us to be able to run and test this, let's make a quick update to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"App.js")," file to make the ",(0,o.mdx)("inlineCode",{parentName:"p"},"handleImage")," function call our updated ",(0,o.mdx)("inlineCode",{parentName:"p"},"detectObjects")," function."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js" {41}',title:'"App.js"',"{41}":!0},"import * as React from 'react';\nimport {useCallback, useRef, useState} from 'react';\nimport {\n  ActivityIndicator,\n  Button,\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport {Camera, Canvas, Image} from 'react-native-pytorch-core';\nimport detectObjects from './ObjectDetector';\nimport CameraScreen from './screens/CameraScreen';\nimport LoadingScreen from './screens/LoadingScreen';\nimport ResultsScreen from './screens/ResultsScreen';\n\nconst ScreenStates = {\n  CAMERA: 0,\n  LOADING: 1,\n  RESULTS: 2,\n};\n\nexport default function ObjectDetectionExample() {\n  const [image, setImage] = useState(null);\n  const [boundingBoxes, setBoundingBoxes] = useState(null);\n  const [screenState, setScreenState] = useState(ScreenStates.CAMERA);\n\n  // Handle the reset button and return to the camera capturing mode\n  const handleReset = useCallback(async () => {\n    setScreenState(ScreenStates.CAMERA);\n    if (image != null) {\n      await image.release();\n    }\n    setImage(null);\n    setBoundingBoxes(null);\n  }, [image, setScreenState]);\n\n  // This handler function handles the camera's capture event\n  async function handleImage(capturedImage) {\n    await detectObjects(capturedImage);\n    capturedImage.release();\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {screenState === ScreenStates.CAMERA && (\n        <CameraScreen onCapture={handleImage} />\n      )}\n      {screenState === ScreenStates.LOADING && <LoadingScreen />}\n      {screenState === ScreenStates.RESULTS && (\n        <ResultsScreen\n          image={image}\n          boundingBoxes={boundingBoxes}\n          onReset={handleReset}\n        />\n      )}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n")),(0,o.mdx)("p",null,"Now that we are calling the updated ",(0,o.mdx)("inlineCode",{parentName:"p"},"detectObjects")," function, let's test it by running the snack in the PlayTorch app."),(0,o.mdx)("p",null,"When you press the capture button now, you should see something similar to the following in the logs:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'\u25bc{dtype:"float32",shape:[\u2026]}\n  dtype:"float32"\n  \u25bashape:[1,3,1422,800]\n')),(0,o.mdx)("p",null,"With our tensor in the right shape and ready for inference, let's load a model and run it!"),(0,o.mdx)("h2",{id:"load-model-and-run-inference"},"Load model and run inference"),(0,o.mdx)("p",null,"Now we get to actually add some ML to our app! Let's walk through the updates we are making to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ObjectDetector.js")," file in the block below."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Add the ",(0,o.mdx)("inlineCode",{parentName:"li"},"MobileModel")," to our imports from the PlayTorch SDK (",(0,o.mdx)("inlineCode",{parentName:"li"},"react-native-pytorch-core"),")"),(0,o.mdx)("li",{parentName:"ol"},"Create a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"MODEL_URL")," and set it equal to the download link for the DETR model (",(0,o.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/playtorch/releases/download/v0.1.0/detr_resnet50.ptl"},"https://github.com/facebookresearch/playtorch/releases/download/v0.1.0/detr_resnet50.ptl"),")"),(0,o.mdx)("li",{parentName:"ol"},"Create a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"model")," and initially set it to ",(0,o.mdx)("inlineCode",{parentName:"li"},"null"),". We put this variable outside of our ",(0,o.mdx)("inlineCode",{parentName:"li"},"detectObjects")," function so we only have to load it once."),(0,o.mdx)("li",{parentName:"ol"},"Check if the ",(0,o.mdx)("inlineCode",{parentName:"li"},"model")," is still ",(0,o.mdx)("inlineCode",{parentName:"li"},"null")," and if it is, download the model file from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"MODEL_URL")," and then load the ",(0,o.mdx)("inlineCode",{parentName:"li"},"model")," into memory with the newly downloaded file"),(0,o.mdx)("li",{parentName:"ol"},"Run the DETR model on our ",(0,o.mdx)("inlineCode",{parentName:"li"},"formattedInputTensor")," by calling the ",(0,o.mdx)("inlineCode",{parentName:"li"},"model.forward")," function and store the result in a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"output")),(0,o.mdx)("li",{parentName:"ol"},"Log the ",(0,o.mdx)("inlineCode",{parentName:"li"},"output")," to see what our model has generated")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js",metastring:'title="ObjectDetector.js" {3,10-13,45-55}',title:'"ObjectDetector.js"',"{3,10-13,45-55}":!0},"import {\n  media,\n  MobileModel,\n  torch,\n  torchvision,\n} from 'react-native-pytorch-core';\n\nconst T = torchvision.transforms;\n\nconst MODEL_URL =\n  'https://github.com/facebookresearch/playtorch/releases/download/v0.1.0/detr_resnet50.ptl';\n\nlet model = null;\n\nexport default async function detectObjects(image) {\n  // Get image width and height\n  const imageWidth = image.getWidth();\n  const imageHeight = image.getHeight();\n\n  // Convert image to blob, which is a byte representation of the image\n  // in the format height (H), width (W), and channels (C), or HWC for short\n  const blob = media.toBlob(image);\n\n  // Get a tensor from image the blob and also define in what format\n  // the image blob is.\n  let tensor = torch.fromBlob(blob, [imageHeight, imageWidth, 3]);\n\n  // Rearrange the tensor shape to be [CHW]\n  tensor = tensor.permute([2, 0, 1]);\n\n  // Divide the tensor values by 255 to get values between [0, 1]\n  tensor = tensor.div(255);\n\n  // Resize the image tensor to 3 x min(height, 800) x min(width, 800)\n  const resize = T.resize(800);\n  tensor = resize(tensor);\n\n  // Normalize the tensor image with mean and standard deviation\n  const normalize = T.normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]);\n  tensor = normalize(tensor);\n\n  // Unsqueeze adds 1 leading dimension to the tensor\n  const formattedInputTensor = tensor.unsqueeze(0);\n\n  // Load model if not loaded\n  if (model == null) {\n    console.log('Loading model...');\n    const filePath = await MobileModel.download(MODEL_URL);\n    model = await torch.jit._loadForMobile(filePath);\n    console.log('Model successfully loaded');\n  }\n\n  // Run inference\n  const output = await model.forward(formattedInputTensor);\n  console.log(output);\n}\n")),(0,o.mdx)("p",null,"Now that we have code to download and run the model, let's see what it produces!"),(0,o.mdx)("p",null,"Remember that it will be slower the first time you run it because it will need to download the model. After that, it should run much faster. It will also need to redownload the model each time you update the code and it reloads on your device. There are plenty of ways to get around this, but we will not cover them in this tutorial."),(0,o.mdx)("p",null,"When you press the capture button now, after the model is done downloading, you should see something similar to the following in the logs:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'Loading model...\nModel successfully loaded\n\u25bc{pred_logits:{\u2026},pred_boxes:{\u2026}}\n  \u25bcpred_logits:{dtype:"float32",shape:[\u2026]}\n    dtype:"float32"\n    \u25bashape:[1,100,92]\n  \u25bcpred_boxes:{dtype:"float32",shape:[\u2026]}\n    dtype:"float32"\n    \u25bashape:[1,100,4]\n')),(0,o.mdx)("p",null,"Hurray! Our model is running! The output seems a bit confusing at first glance though \ud83e\udd14"),(0,o.mdx)("p",null,"Let's unpack this output and format it for the rest of our app to use."),(0,o.mdx)("h2",{id:"format-model-output"},"Format model output"),(0,o.mdx)("p",null,"In order to make the output easy to use in the rest of our app, we will have to do some transformations of it. Here's a summary of the changes we're making to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ObjectDetector.js")," file:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Import the class labels from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"CoCoClasses.json")," file as ",(0,o.mdx)("inlineCode",{parentName:"li"},"COCO_CLASSES")),(0,o.mdx)("li",{parentName:"ol"},"Create a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"probabilityThreshold")," set to ",(0,o.mdx)("inlineCode",{parentName:"li"},"0.7")," meaning we will only consider an object detected if the model has a confidence score of over ",(0,o.mdx)("inlineCode",{parentName:"li"},"0.7")," for that detection"),(0,o.mdx)("li",{parentName:"ol"},"Extract the ",(0,o.mdx)("inlineCode",{parentName:"li"},"predLogits")," and ",(0,o.mdx)("inlineCode",{parentName:"li"},"predBoxes"),' from the output. Note that "pred" is short for predicted and we use the ',(0,o.mdx)("inlineCode",{parentName:"li"},".squeeze(0)")," method to get rid of the initial ",(0,o.mdx)("inlineCode",{parentName:"li"},"1")," from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"shape")," we saw in the logged output and just have the data in the rest of the tensor."),(0,o.mdx)("li",{parentName:"ol"},"Grab the number of predictions from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"predLogits")," output object and store it in a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"numPredictions")),(0,o.mdx)("li",{parentName:"ol"},"Create an empty array called ",(0,o.mdx)("inlineCode",{parentName:"li"},"resultBoxes")),(0,o.mdx)("li",{parentName:"ol"},"Loop over each of the model predictions and do the following:",(0,o.mdx)("ol",{parentName:"li"},(0,o.mdx)("li",{parentName:"ol"},"Grab the confidence scores of the current prediction for each of the different labels and store them in variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"confidencesTensor")),(0,o.mdx)("li",{parentName:"ol"},"Convert the ",(0,o.mdx)("inlineCode",{parentName:"li"},"confidencesTensor")," into a tensor of probabilities between 0 and 1 by using the ",(0,o.mdx)("inlineCode",{parentName:"li"},"softmax")," function and store that in a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"scores")),(0,o.mdx)("li",{parentName:"ol"},"Find the index of highest probability class in the ",(0,o.mdx)("inlineCode",{parentName:"li"},"scores")," tensor with the ",(0,o.mdx)("inlineCode",{parentName:"li"},"argmax")," function and save it to a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"maxIdx")),(0,o.mdx)("li",{parentName:"ol"},"Use the ",(0,o.mdx)("inlineCode",{parentName:"li"},"maxIdx")," to grab the highest probability out of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"scores")," tensor and store it in a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"maxProb")),(0,o.mdx)("li",{parentName:"ol"},"If the ",(0,o.mdx)("inlineCode",{parentName:"li"},"maxProb")," is below our ",(0,o.mdx)("inlineCode",{parentName:"li"},"probabilityThreshold")," or the ",(0,o.mdx)("inlineCode",{parentName:"li"},"maxIdx")," is beyond the number of classes we have, skip the rest of the loop that adds the prediction to the results with the ",(0,o.mdx)("inlineCode",{parentName:"li"},"continue")," statement"),(0,o.mdx)("li",{parentName:"ol"},"Grab the current box from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"predBoxes")," tensor and store it in the ",(0,o.mdx)("inlineCode",{parentName:"li"},"boxTensor")," variable"),(0,o.mdx)("li",{parentName:"ol"},"Extract the coordinates of the center point of the box (",(0,o.mdx)("inlineCode",{parentName:"li"},"centerX"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"centerY"),") as well as the dimensions of the box (",(0,o.mdx)("inlineCode",{parentName:"li"},"boxWidth"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"boxHeight"),") from the ",(0,o.mdx)("inlineCode",{parentName:"li"},"boxTensor")),(0,o.mdx)("li",{parentName:"ol"},"Calculate the coordinates (",(0,o.mdx)("inlineCode",{parentName:"li"},"x"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"y"),") of the top-left corner of the box"),(0,o.mdx)("li",{parentName:"ol"},"Create an array that contains the coordinates of the top-left corner of the box as well as its dimensions and store it in a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"bounds")),(0,o.mdx)("li",{parentName:"ol"},"Create an object that contains the ",(0,o.mdx)("inlineCode",{parentName:"li"},"bounds")," array we just created as well as the class label, which we can grab out of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"COCO_CLASSES")," array by indexing into it with the ",(0,o.mdx)("inlineCode",{parentName:"li"},"maxIdx")),(0,o.mdx)("li",{parentName:"ol"},"Add the new ",(0,o.mdx)("inlineCode",{parentName:"li"},"match")," object to our ",(0,o.mdx)("inlineCode",{parentName:"li"},"resultBoxes")," array with the ",(0,o.mdx)("inlineCode",{parentName:"li"},".push")," method"))),(0,o.mdx)("li",{parentName:"ol"},"Log the result boxes so we can inspect them"),(0,o.mdx)("li",{parentName:"ol"},"Return the result boxes so whoever calls this function can use them")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js",metastring:'title="ObjectDetector.js" {7,15,58-97}',title:'"ObjectDetector.js"',"{7,15,58-97}":!0},"import {\n  media,\n  MobileModel,\n  torch,\n  torchvision,\n} from 'react-native-pytorch-core';\nimport COCO_CLASSES from './CoCoClasses.json';\n\nconst T = torchvision.transforms;\n\nconst MODEL_URL =\n  'https://github.com/facebookresearch/playtorch/releases/download/v0.1.0/detr_resnet50.ptl';\n\nlet model = null;\nconst probabilityThreshold = 0.7;\n\nexport default async function detectObjects(image) {\n  // Get image width and height\n  const imageWidth = image.getWidth();\n  const imageHeight = image.getHeight();\n\n  // Convert image to blob, which is a byte representation of the image\n  // in the format height (H), width (W), and channels (C), or HWC for short\n  const blob = media.toBlob(image);\n\n  // Get a tensor from image the blob and also define in what format\n  // the image blob is.\n  let tensor = torch.fromBlob(blob, [imageHeight, imageWidth, 3]);\n\n  // Rearrange the tensor shape to be [CHW]\n  tensor = tensor.permute([2, 0, 1]);\n\n  // Divide the tensor values by 255 to get values between [0, 1]\n  tensor = tensor.div(255);\n\n  // Resize the image tensor to 3 x min(height, 800) x min(width, 800)\n  const resize = T.resize(800);\n  tensor = resize(tensor);\n\n  // Normalize the tensor image with mean and standard deviation\n  const normalize = T.normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]);\n  tensor = normalize(tensor);\n\n  // Unsqueeze adds 1 leading dimension to the tensor\n  const formattedInputTensor = tensor.unsqueeze(0);\n\n  // Load model if not loaded\n  if (model == null) {\n    console.log('Loading model...');\n    const filePath = await MobileModel.download(MODEL_URL);\n    model = await torch.jit._loadForMobile(filePath);\n    console.log('Model successfully loaded');\n  }\n\n  // Run inference\n  const output = await model.forward(formattedInputTensor);\n\n  const predLogits = output.pred_logits.squeeze(0);\n  const predBoxes = output.pred_boxes.squeeze(0);\n\n  const numPredictions = predLogits.shape[0];\n\n  const resultBoxes = [];\n\n  for (let i = 0; i < numPredictions; i++) {\n    const confidencesTensor = predLogits[i];\n    const scores = confidencesTensor.softmax(0);\n    const maxIndex = confidencesTensor.argmax().item();\n    const maxProb = scores[maxIndex].item();\n\n    if (maxProb <= probabilityThreshold || maxIndex >= COCO_CLASSES.length) {\n      continue;\n    }\n\n    const boxTensor = predBoxes[i];\n    const [centerX, centerY, boxWidth, boxHeight] = boxTensor.data();\n    const x = centerX - boxWidth / 2;\n    const y = centerY - boxHeight / 2;\n\n    // Adjust bounds to image size\n    const bounds = [\n      x * imageWidth,\n      y * imageHeight,\n      boxWidth * imageWidth,\n      boxHeight * imageHeight,\n    ];\n\n    const match = {\n      objectClass: COCO_CLASSES[maxIndex],\n      bounds,\n    };\n\n    resultBoxes.push(match);\n  }\n\n  console.log(resultBoxes);\n  return resultBoxes;\n}\n")),(0,o.mdx)("p",null,"That was a lot of changes! Let's test them out to see what our results look like now."),(0,o.mdx)("p",null,"When you press the capture button now, you should see something like this in the logs:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'\u25bc[{\u2026},{\u2026},{\u2026}]\n  \u25bc0:{objectClass:"bowl",bounds:[\u2026]}\n    objectClass:"bowl"\n    \u25babounds:[58.80519703030586,1618.3972656726837,123.18191081285477,98.28389883041382]\n  \u25ba1:{objectClass:"person",bounds:[\u2026]}\n  \u25ba2:{objectClass:"cup",bounds:[\u2026]}\n  length:3\n')),(0,o.mdx)("p",null,"Now that we have the results in a much more usable format with class labels and a bounding box, let's display our results in the app!"),(0,o.mdx)("h2",{id:"display-results"},"Display results"),(0,o.mdx)("p",null,"In order to display the results in our app, all we need to do is make some simple changes in our ",(0,o.mdx)("inlineCode",{parentName:"p"},"App.js")," file."),(0,o.mdx)("p",null,"Before we make any changes, we should have a ",(0,o.mdx)("inlineCode",{parentName:"p"},"screenState")," state variable that chooses which screen we show. Currently we are only ever showing the camera screen, so we will need to update that state variable. You can also find a ",(0,o.mdx)("inlineCode",{parentName:"p"},"ScreenStates")," object that has the 3 different screen states our app can have."),(0,o.mdx)("p",null,"We also should notice that we have a state variable called ",(0,o.mdx)("inlineCode",{parentName:"p"},"boundingBoxes")," that is currently always an empty array. That ",(0,o.mdx)("inlineCode",{parentName:"p"},"boundingBoxes")," state variable is passed to our ",(0,o.mdx)("inlineCode",{parentName:"p"},"ResultsScreen"),", so we will need to make sure we updated it for our results to be displayed."),(0,o.mdx)("p",null,"With that understanding of how our app works, let's make some updates to our ",(0,o.mdx)("inlineCode",{parentName:"p"},"App.js")," file. All of our changes will be inside our ",(0,o.mdx)("inlineCode",{parentName:"p"},"handleImage")," function. Here's a summary:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Update the ",(0,o.mdx)("inlineCode",{parentName:"li"},"image")," state variable to be the newly ",(0,o.mdx)("inlineCode",{parentName:"li"},"capturedImage")),(0,o.mdx)("li",{parentName:"ol"},"Update the ",(0,o.mdx)("inlineCode",{parentName:"li"},"screenState")," to ",(0,o.mdx)("inlineCode",{parentName:"li"},"ScreenStates.LOADING")," in order to display the ",(0,o.mdx)("inlineCode",{parentName:"li"},"LoadingScreen")," while our model downloads and runs"),(0,o.mdx)("li",{parentName:"ol"},"In a ",(0,o.mdx)("inlineCode",{parentName:"li"},"try")," block:",(0,o.mdx)("ol",{parentName:"li"},(0,o.mdx)("li",{parentName:"ol"},"Await the result of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"detectObjects")," function and store it in a variable called ",(0,o.mdx)("inlineCode",{parentName:"li"},"newBoxes")),(0,o.mdx)("li",{parentName:"ol"},"Update the ",(0,o.mdx)("inlineCode",{parentName:"li"},"boundingBoxes")," state variable to be the ",(0,o.mdx)("inlineCode",{parentName:"li"},"newBoxes")),(0,o.mdx)("li",{parentName:"ol"},"Update the ",(0,o.mdx)("inlineCode",{parentName:"li"},"screenState")," to ",(0,o.mdx)("inlineCode",{parentName:"li"},"ScreenStates.RESULTS")," in order to display the ",(0,o.mdx)("inlineCode",{parentName:"li"},"ResultsScreen")," so we can visually see what objects DETR detected in our image"))),(0,o.mdx)("li",{parentName:"ol"},"Add a ",(0,o.mdx)("inlineCode",{parentName:"li"},"catch")," block in case there is an error when we run our model:",(0,o.mdx)("ol",{parentName:"li"},(0,o.mdx)("li",{parentName:"ol"},"Call the ",(0,o.mdx)("inlineCode",{parentName:"li"},"handleReset")," button to put the app back in the ",(0,o.mdx)("inlineCode",{parentName:"li"},"CameraScreen")," so we can take a new photo")))),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js" {42-53}',title:'"App.js"',"{42-53}":!0},"import * as React from 'react';\nimport {useCallback, useRef, useState} from 'react';\nimport {\n  ActivityIndicator,\n  Button,\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport {Camera, Canvas, Image} from 'react-native-pytorch-core';\nimport detectObjects from './ObjectDetector';\nimport CameraScreen from './screens/CameraScreen';\nimport LoadingScreen from './screens/LoadingScreen';\nimport ResultsScreen from './screens/ResultsScreen';\n\nconst ScreenStates = {\n  CAMERA: 0,\n  LOADING: 1,\n  RESULTS: 2,\n};\n\nexport default function ObjectDetectionExample() {\n  const [image, setImage] = useState(null);\n  const [boundingBoxes, setBoundingBoxes] = useState(null);\n  const [screenState, setScreenState] = useState(ScreenStates.CAMERA);\n\n  // Handle the reset button and return to the camera capturing mode\n  const handleReset = useCallback(async () => {\n    setScreenState(ScreenStates.CAMERA);\n    if (image != null) {\n      await image.release();\n    }\n    setImage(null);\n    setBoundingBoxes(null);\n  }, [image, setScreenState]);\n\n  // This handler function handles the camera's capture event\n  async function handleImage(capturedImage) {\n    setImage(capturedImage);\n    // Wait for image to process through DETR model and draw resulting image\n    setScreenState(ScreenStates.LOADING);\n    try {\n      const newBoxes = await detectObjects(capturedImage);\n      setBoundingBoxes(newBoxes);\n      // Switch to the ResultsScreen to display the detected objects\n      setScreenState(ScreenStates.RESULTS);\n    } catch (err) {\n      // In case something goes wrong, go back to the CameraScreen to take a new picture\n      handleReset();\n    }\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {screenState === ScreenStates.CAMERA && (\n        <CameraScreen onCapture={handleImage} />\n      )}\n      {screenState === ScreenStates.LOADING && <LoadingScreen />}\n      {screenState === ScreenStates.RESULTS && (\n        <ResultsScreen\n          image={image}\n          boundingBoxes={boundingBoxes}\n          onReset={handleReset}\n        />\n      )}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n")),(0,o.mdx)("p",null,"With the results of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"detectObjects")," function hooked up, we are now ready to see the full app working. Load the latest changes into the PlayTorch app and let's test it!"),(0,o.mdx)("p",null,"When you press the capture button now, after the model finishes running, you should see the picture you took but with labeled boxes around the detected objects, just like the screenshot below:"),(0,o.mdx)("p",null,(0,o.mdx)("img",{src:n(21475).Z,width:"300",height:"650"})),(0,o.mdx)("h2",{id:"wrapping-up"},"Wrapping up"),(0,o.mdx)("p",null,"We hope you enjoyed getting an object detection model up and running with PlayTorch."),(0,o.mdx)("h3",{id:"providing-feedback"},"Providing feedback"),(0,o.mdx)("p",null,"Was something unclear? Did you run into any bugs? Is there another tutorial or model you'd like to see from us?"),(0,o.mdx)("p",null,"We would love to hear how we can improve."),(0,o.mdx)("p",null,"Come chat with us on ",(0,o.mdx)("a",{parentName:"p",href:"https://discord.gg/sQkXTqEt33"},"Discord")," or file an issue on ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/playtorch"},"GitHub"),"."))}h.isMDXComponent=!0},4145:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/snack-open-logs-49861b6f8e66c61c31dc22fc983e5ab2.png"},24070:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/starter-screen-outside-11d78e32eded542b1ea598d77a7b4a4b.png"},21475:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/working-example-de6de1de73c27b90783464e552052cf6.png"}}]);